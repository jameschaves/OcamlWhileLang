### Starting build.
# Target: main.ml.depends, tags: { package(oUnit), extension:ml, file:main.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -modules main.ml > main.ml.depends
# Target: ast.ml.depends, tags: { package(oUnit), extension:ml, file:ast.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -modules ast.ml > ast.ml.depends # cached
# Target: ast.cmo, tags: { package(oUnit), byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet, traverse, use_menhir }
ocamlfind ocamlc -c -package oUnit -o ast.cmo ast.ml # cached
# Target: lexer.mll, tags: { package(oUnit), extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet, traverse, use_menhir }
/home/jameschaves/.opam/cs3110-2023sp/bin/ocamllex.opt -q lexer.mll # cached
# Target: lexer.ml.depends, tags: { package(oUnit), extension:ml, file:lexer.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -modules lexer.ml > lexer.ml.depends # cached
# Target: parser.mly.depends, tags: { package(oUnit), extension:mly, file:parser.mly, infer, menhir_ocamldep, ocaml, ocamldep, quiet, traverse, use_menhir }
menhir --raw-depend --ocamldep 'ocamlfind ocamldep -modules' parser.mly > parser.mly.depends # cached
# Target: parser.mly, tags: { package(oUnit), byte, compile, extension:ml, extension:mly, file:parser.ml, file:parser.mly, infer, menhir, ocaml, parser, quiet, traverse, use_menhir }
menhir --ocamlc 'ocamlfind ocamlc -package oUnit' --infer parser.mly # cached
# Target: parser.mli.depends, tags: { package(oUnit), extension:mli, file:parser.mli, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -modules parser.mli > parser.mli.depends # cached
# Target: parser.cmi, tags: { package(oUnit), byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet, traverse, use_menhir }
ocamlfind ocamlc -c -package oUnit -o parser.cmi parser.mli # cached
# Target: lexer.cmo, tags: { package(oUnit), byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet, traverse, use_menhir }
ocamlfind ocamlc -c -package oUnit -o lexer.cmo lexer.ml # cached
# Target: main.cmo, tags: { package(oUnit), byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, quiet, traverse, use_menhir }
ocamlfind ocamlc -c -package oUnit -o main.cmo main.ml
+ ocamlfind ocamlc -c -package oUnit -o main.cmo main.ml
File "main.ml", lines 13-14, characters 2-43:
13 | ..match e with
14 |   | IfThenElse (_, _, _) -> failwith "TODO"
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(Neg|Ident _|Int _|BinOp (_, _, _)|Bool _|Not _|RelOp (_, _, _)|
BoolOp (_, _, _)|Seq (_, _)|While (_, _)|Assignment (_, _, Label _)|
Skip (Label _)|Condition (_, Label _))
File "main.ml", lines 18-23, characters 30-49:
18 | ..............................function
19 |   | Int _ -> true
20 |   | Ident _ -> false
21 |   | (Neg | BinOp (_, _, _)) -> false
22 |   | (Bool _ | Not _) -> true;
23 |   | (RelOp (_, _, _) | BoolOp (_, _, _)) -> false
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(Seq (_, _)|IfThenElse (_, _, _)|While (_, _)|Assignment (_, _, _)|Skip _|
Condition (_, _))
File "main.ml", lines 26-48, characters 30-41:
26 | ..............................function 
27 |   | (Int _ | Ident _ | Bool _ | Not _ | Neg) -> failwith "Does not step"
28 |   | BinOp (binOp, a1, a2) when is_value a1 && is_value a2 ->
29 |   step_binOp binOp a1 a2
30 |   | BinOp (binOp, a1, a2) when is_value a1 -> BinOp (binOp, a1, step a2)
...
45 |     let cStep = step c and
46 |         s1Step = step s1 and
47 |         s2Step = step s2 in
48 |         IfThenElse(cStep, s1Step, s2Step)
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(While (_, _)|Assignment (_, _, _)|Skip _|Condition (_, _))
# Target: parser.ml.depends, tags: { package(oUnit), extension:ml, file:parser.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -modules parser.ml > parser.ml.depends # cached
# Target: parser.cmo, tags: { package(oUnit), byte, compile, extension:cmo, extension:ml, file:parser.cmo, file:parser.ml, implem, ocaml, quiet, traverse, use_menhir }
ocamlfind ocamlc -c -package oUnit -o parser.cmo parser.ml # cached
# Target: main.byte, tags: { package(oUnit), byte, dont_link_with, extension:byte, file:main.byte, link, ocaml, program, quiet, traverse, use_menhir }
ocamlfind ocamlc -linkpkg -package oUnit ast.cmo parser.cmo lexer.cmo main.cmo -o main.byte
# Compilation successful.
