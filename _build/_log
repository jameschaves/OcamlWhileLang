### Starting build.
# Target: lv_analysis.ml.depends, tags: { package(oUnit), extension:ml, file:lv_analysis.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -modules lv_analysis.ml > lv_analysis.ml.depends
# Target: ast.ml.depends, tags: { package(oUnit), extension:ml, file:ast.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -modules ast.ml > ast.ml.depends # cached
# Target: ast.cmo, tags: { package(oUnit), byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet, traverse, use_menhir }
ocamlfind ocamlc -c -package oUnit -o ast.cmo ast.ml # cached
# Target: data_flow.ml.depends, tags: { package(oUnit), extension:ml, file:data_flow.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -modules data_flow.ml > data_flow.ml.depends # cached
# Target: data_flow.cmo, tags: { package(oUnit), byte, compile, extension:cmo, extension:ml, file:data_flow.cmo, file:data_flow.ml, implem, ocaml, quiet, traverse, use_menhir }
ocamlfind ocamlc -c -package oUnit -o data_flow.cmo data_flow.ml # cached
# Target: utils.ml.depends, tags: { package(oUnit), extension:ml, file:utils.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -modules utils.ml > utils.ml.depends # cached
# Target: utils.cmo, tags: { package(oUnit), byte, compile, extension:cmo, extension:ml, file:utils.cmo, file:utils.ml, implem, ocaml, quiet, traverse, use_menhir }
ocamlfind ocamlc -c -package oUnit -o utils.cmo utils.ml # cached
# Target: lv_analysis.cmo, tags: { package(oUnit), byte, compile, extension:cmo, extension:ml, file:lv_analysis.cmo, file:lv_analysis.ml, implem, ocaml, quiet, traverse, use_menhir }
ocamlfind ocamlc -c -package oUnit -o lv_analysis.cmo lv_analysis.ml
+ ocamlfind ocamlc -c -package oUnit -o lv_analysis.cmo lv_analysis.ml
File "lv_analysis.ml", lines 10-13, characters 2-65:
10 | ..match expr with
11 |   | Int _ -> s
12 |   | Ident x -> IdentSet.add x s
13 |   | BinOp (_, a1, a2) -> let lh = fv_aexpr a1 s in fv_aexpr a2 lh
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
Neg
# Target: lv_analysis.byte, tags: { package(oUnit), byte, dont_link_with, extension:byte, file:lv_analysis.byte, link, ocaml, program, quiet, traverse, use_menhir }
ocamlfind ocamlc -linkpkg -package oUnit ast.cmo data_flow.cmo utils.cmo lv_analysis.cmo -o lv_analysis.byte
# Compilation successful.
