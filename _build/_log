### Starting build.
# Target: cfg.ml.depends, tags: { package(oUnit), extension:ml, file:cfg.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -modules cfg.ml > cfg.ml.depends # cached
# Target: data_flow.ml.depends, tags: { package(oUnit), extension:ml, file:data_flow.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -modules data_flow.ml > data_flow.ml.depends # cached
# Target: ast.ml.depends, tags: { package(oUnit), extension:ml, file:ast.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -modules ast.ml > ast.ml.depends # cached
# Target: ast.cmo, tags: { package(oUnit), byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet, traverse, use_menhir }
ocamlfind ocamlc -c -package oUnit -o ast.cmo ast.ml # cached
# Target: data_flow.cmo, tags: { package(oUnit), byte, compile, extension:cmo, extension:ml, file:data_flow.cmo, file:data_flow.ml, implem, ocaml, quiet, traverse, use_menhir }
ocamlfind ocamlc -c -package oUnit -o data_flow.cmo data_flow.ml # cached
# Target: lexer.mll, tags: { package(oUnit), extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet, traverse, use_menhir }
/home/jameschaves/.opam/cs3110-2023sp/bin/ocamllex.opt -q lexer.mll # cached
# Target: lexer.ml.depends, tags: { package(oUnit), extension:ml, file:lexer.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -modules lexer.ml > lexer.ml.depends # cached
# Target: parser.mly.depends, tags: { package(oUnit), extension:mly, file:parser.mly, infer, menhir_ocamldep, ocaml, ocamldep, quiet, traverse, use_menhir }
menhir --raw-depend --ocamldep 'ocamlfind ocamldep -modules' parser.mly > parser.mly.depends # cached
# Target: parser.mly, tags: { package(oUnit), byte, compile, extension:ml, extension:mly, file:parser.ml, file:parser.mly, infer, menhir, ocaml, parser, quiet, traverse, use_menhir }
menhir --ocamlc 'ocamlfind ocamlc -package oUnit' --infer parser.mly # cached
# Target: parser.mli.depends, tags: { package(oUnit), extension:mli, file:parser.mli, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -modules parser.mli > parser.mli.depends # cached
# Target: parser.cmi, tags: { package(oUnit), byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet, traverse, use_menhir }
ocamlfind ocamlc -c -package oUnit -o parser.cmi parser.mli # cached
# Target: lexer.cmo, tags: { package(oUnit), byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet, traverse, use_menhir }
ocamlfind ocamlc -c -package oUnit -o lexer.cmo lexer.ml # cached
# Target: utils.ml.depends, tags: { package(oUnit), extension:ml, file:utils.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -modules utils.ml > utils.ml.depends # cached
# Target: utils.cmo, tags: { package(oUnit), byte, compile, extension:cmo, extension:ml, file:utils.cmo, file:utils.ml, implem, ocaml, quiet, traverse, use_menhir }
ocamlfind ocamlc -c -package oUnit -o utils.cmo utils.ml # cached
# Target: cfg.cmo, tags: { package(oUnit), byte, compile, extension:cmo, extension:ml, file:cfg.cmo, file:cfg.ml, implem, ocaml, quiet, traverse, use_menhir }
ocamlfind ocamlc -c -package oUnit -o cfg.cmo cfg.ml # cached
# Target: parser.ml.depends, tags: { package(oUnit), extension:ml, file:parser.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -modules parser.ml > parser.ml.depends # cached
# Target: parser.cmo, tags: { package(oUnit), byte, compile, extension:cmo, extension:ml, file:parser.cmo, file:parser.ml, implem, ocaml, quiet, traverse, use_menhir }
ocamlfind ocamlc -c -package oUnit -o parser.cmo parser.ml # cached
# Target: cfg.byte, tags: { package(oUnit), byte, dont_link_with, extension:byte, file:cfg.byte, link, ocaml, program, quiet, traverse, use_menhir }
ocamlfind ocamlc -linkpkg -package oUnit ast.cmo data_flow.cmo parser.cmo lexer.cmo utils.cmo cfg.cmo -o cfg.byte
# Compilation successful.
