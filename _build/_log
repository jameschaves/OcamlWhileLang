### Starting build.
# Target: main.ml.depends, tags: { package(oUnit), extension:ml, file:main.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -modules main.ml > main.ml.depends
# Target: ast.ml.depends, tags: { package(oUnit), extension:ml, file:ast.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -modules ast.ml > ast.ml.depends
# Target: lexer.mll, tags: { package(oUnit), extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet, traverse, use_menhir }
/home/jameschaves/.opam/cs3110-2023sp/bin/ocamllex.opt -q lexer.mll
# Target: lexer.ml.depends, tags: { package(oUnit), extension:ml, file:lexer.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -modules lexer.ml > lexer.ml.depends
# Target: parser.mly.depends, tags: { package(oUnit), extension:mly, file:parser.mly, infer, menhir_ocamldep, ocaml, ocamldep, quiet, traverse, use_menhir }
menhir --raw-depend --ocamldep 'ocamlfind ocamldep -modules' parser.mly > parser.mly.depends
# Target: ast.cmo, tags: { package(oUnit), byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet, traverse, use_menhir }
ocamlfind ocamlc -c -package oUnit -o ast.cmo ast.ml
+ ocamlfind ocamlc -c -package oUnit -o ast.cmo ast.ml
File "ast.ml", line 62, characters 9-40:
62 | let label(Stmt(Assignment(_, _, l))) = l
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
Stmt
  (Skip Int|Seq (_, _)|IfThenElse (Condition (_, Int), _, _)|
  While (Condition (_, Int), _))
File "ast.ml", line 63, characters 9-22:
63 | let label(Skip(l)) = l
              ^^^^^^^^^^^^^
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(Assignment (_, _, Int)|Seq (_, _)|IfThenElse (Condition (_, Int), _, _)|
While (Condition (_, Int), _))
File "ast.ml", line 64, characters 9-41:
64 | let label(Condition(Condition(b, l))) = l
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
Stmt _
# Target: parser.mly, tags: { package(oUnit), byte, compile, extension:ml, extension:mly, file:parser.ml, file:parser.mly, infer, menhir, ocaml, parser, quiet, traverse, use_menhir }
menhir --ocamlc 'ocamlfind ocamlc -package oUnit' --infer parser.mly
+ menhir --ocamlc 'ocamlfind ocamlc -package oUnit' --infer parser.mly
Warning: 9 states have shift/reduce conflicts.
Warning: 63 shift/reduce conflicts were arbitrarily resolved.
# Target: parser.mli.depends, tags: { package(oUnit), extension:mli, file:parser.mli, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -modules parser.mli > parser.mli.depends
# Target: parser.cmi, tags: { package(oUnit), byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet, traverse, use_menhir }
ocamlfind ocamlc -c -package oUnit -o parser.cmi parser.mli
# Target: lexer.cmo, tags: { package(oUnit), byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet, traverse, use_menhir }
ocamlfind ocamlc -c -package oUnit -o lexer.cmo lexer.ml
# Target: main.cmo, tags: { package(oUnit), byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, quiet, traverse, use_menhir }
ocamlfind ocamlc -c -package oUnit -o main.cmo main.ml
+ ocamlfind ocamlc -c -package oUnit -o main.cmo main.ml
File "main.ml", lines 12-17, characters 2-49:
12 | ..match e with
13 |   (* | Num n -> string_of_int n *)
14 |   | Num i -> string_of_int i
15 |   | Var v -> v
16 |   | Stmt _ -> failwith "14 precondition violated"
17 |   | AExp _ -> failwith "14 precondition violated"
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(True|False|Block _|BExp (_, _, _)|Not _|Label _)
File "main.ml", lines 20-25, characters 30-21:
20 | ..............................function 
21 |     | Var _ -> true
22 |     (* | Num _ -> true *)
23 |     | Var _ -> true
24 |     | AExp _ -> false
25 |     | Stmt _ -> false
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(True|False|Block _|BExp (_, _, _)|Not _|Num _|Label _)
File "main.ml", line 23, characters 6-11:
23 |     | Var _ -> true
           ^^^^^
Warning 11 [redundant-case]: this match case is unused.
File "main.ml", lines 28-34, characters 26-51:
28 | ..........................function 
29 |   | Num _ -> failwith "Does not step"
30 |   | Var _ -> failwith "Does not step"
31 |   | AExp (aExp, e1, e2) when is_value e1 && is_value e2 ->
32 |       step_aExp aExp e1 e2
33 |   | AExp (aExp, e1, e2) when is_value e1 -> AExp (aExp, e1, step e2)
34 |   | AExp (aExp, e1, e2) -> AExp (aExp, step e1, e2)
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(True|False|Block _|Stmt _|BExp (_, _, _)|Not _|Label _)
# Target: parser.ml.depends, tags: { package(oUnit), extension:ml, file:parser.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -modules parser.ml > parser.ml.depends
# Target: parser.cmo, tags: { package(oUnit), byte, compile, extension:cmo, extension:ml, file:parser.cmo, file:parser.ml, implem, ocaml, quiet, traverse, use_menhir }
ocamlfind ocamlc -c -package oUnit -o parser.cmo parser.ml
# Target: main.byte, tags: { package(oUnit), byte, dont_link_with, extension:byte, file:main.byte, link, ocaml, program, quiet, traverse, use_menhir }
ocamlfind ocamlc -linkpkg -package oUnit ast.cmo parser.cmo lexer.cmo main.cmo -o main.byte
# Compilation successful.
